{
  "info": {
    "name": "War Thunder API",
    "description": "Complete test suite for War Thunder API with success and failure cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "test_nation",
      "value": "usa",
      "type": "string"
    },
    {
      "key": "test_aircraftid",
      "value": "test-aircraft-001",
      "type": "string"
    },
    {
      "key": "created_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Nations",
      "item": [
        {
          "name": "Get All Nations (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nations",
              "host": ["{{base_url}}"],
              "path": ["nations"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Nations have required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Single Nation (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nations/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["nations", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Nation object returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('test_nation'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Single Nation (404 Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nations/invalid_nation_xyz",
              "host": ["{{base_url}}"],
              "path": ["nations", "invalid_nation_xyz"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error object returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Aircraft - CRUD Operations",
      "item": [
        {
          "name": "1. CREATE - Add New Aircraft (Success)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"aircraftid\": \"{{test_aircraftid}}\",\n  \"name\": \"Test Aircraft 001\",\n  \"rank\": 5,\n  \"br\": 8.7,\n  \"type\": \"fighter\",\n  \"crew\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Created aircraft returned with id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('aircraftid');",
                  "    pm.expect(jsonData.aircraftid).to.eql(pm.collectionVariables.get('test_aircraftid'));",
                  "    pm.collectionVariables.set('created_id', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Nation is set correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.nation).to.eql(pm.collectionVariables.get('test_nation'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "1b. CREATE - Missing Required Fields (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rank\": 5,\n  \"br\": 8.7\n}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message about required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "1c. CREATE - Duplicate Aircraft (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"aircraftid\": \"{{test_aircraftid}}\",\n  \"name\": \"Duplicate Test Aircraft\",\n  \"rank\": 5,\n  \"br\": 8.7\n}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Error message about duplicate\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2. READ - Get All Aircraft (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft?limit=10&page=1",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "page",
                  "value": "1"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "    pm.expect(jsonData).to.have.property('totalPages');",
                  "    pm.expect(jsonData).to.have.property('aircraft');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2b. READ - Search Aircraft (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft?q=test",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft"],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.aircraft).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2c. READ - Get Aircraft by Nation (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Nation aircraft returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nation');",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData).to.have.property('aircraft');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2d. READ - Get Specific Aircraft by ID (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/{{test_aircraftid}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "{{test_aircraftid}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Specific aircraft returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.aircraftid).to.eql(pm.collectionVariables.get('test_aircraftid'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2e. READ - Invalid Nation (404)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/invalid_nation",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "invalid_nation"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error contains available nations\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('details');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2f. READ - Aircraft Not Found (404)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/nonexistent-aircraft-9999",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "nonexistent-aircraft-9999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message about not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "3. UPDATE - Patch Aircraft (Success)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"br\": 9.0,\n  \"type\": \"multirole\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/{{test_aircraftid}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "{{test_aircraftid}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Updated aircraft returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.br).to.eql(9.0);",
                  "    pm.expect(jsonData.type).to.eql('multirole');",
                  "});",
                  "",
                  "pm.test(\"Original fields preserved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.aircraftid).to.eql(pm.collectionVariables.get('test_aircraftid'));",
                  "    pm.expect(jsonData.name).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "3b. UPDATE - Aircraft Not Found (404)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"br\": 10.0\n}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/nonexistent-999",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "nonexistent-999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "4. DELETE - Remove Aircraft (Success)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/{{test_aircraftid}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "{{test_aircraftid}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"No content returned\", function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "4b. DELETE - Aircraft Not Found (404)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}/{{test_aircraftid}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}", "{{test_aircraftid}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Helicopters - Read Only",
      "item": [
        {
          "name": "Get All Helicopters (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/helicopters",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "helicopters"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Helicopters returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('helicopters');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Helicopters by Nation (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/helicopters/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "helicopters", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Nation helicopters returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nation');",
                  "    pm.expect(jsonData).to.have.property('helicopters');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Aviation Overview",
      "item": [
        {
          "name": "Get All Aviation Vehicles (Success)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vehicles/aviation",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Combined aviation data returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('aircraft_count');",
                  "    pm.expect(jsonData).to.have.property('helicopter_count');",
                  "    pm.expect(jsonData).to.have.property('vehicles');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "404 - Endpoint Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nonexistent/endpoint",
              "host": ["{{base_url}}"],
              "path": ["nonexistent", "endpoint"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error object with consistent structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "    pm.expect(jsonData.error).to.have.property('details');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid JSON Body (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{invalid json}"
            },
            "url": {
              "raw": "{{base_url}}/vehicles/aviation/aircraft/{{test_nation}}",
              "host": ["{{base_url}}"],
              "path": ["vehicles", "aviation", "aircraft", "{{test_nation}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Get API Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"API documentation returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}